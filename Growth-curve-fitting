rm(list=ls()) # clear all variables and graphics
graphics.off()
dev.off()

install.packages("minpack.lm")
install.packages("nls.multstart")
library(minpack.lm)
library(nls.multstart)
library(tidyverse)
library(broom)
library(ggplot2)


TPC <- read.csv('/Users/baiprongfah/FYP/set2.1.csv')
TPC <- TPC[!is.na(TPC$X.11),] #remove rows with na or the non-number bits 
TPC <- TPC[,-1] #remove A-H columns
TPC <- TPC[,-ncol(TPC)] #remove wavelength column, the last column
TPC <- TPC[2:5] #only select column 2-5
TPC <- TPC[-seq(1, nrow(TPC), 8),] #removve row 1 and row 8 which are water 
TPC <- TPC[-seq(7, nrow(TPC), 7),] # remove row 7

rownames(TPC) <- seq(1:nrow(TPC))

temp <- c(12, 15, 18, 22, 25, 28)
time <- c(0, 4, 8, 24, 28, 32, 48, 52, 56, 72, 76, 80, 96, 100, 104, 120, 128, 144)
strain <- c('S18', 'W02', 'W03','Control')
a <- c('S18','W02', 'W03')
names(TPC) = strain #add the head for each strain
TPC$temp <- rep(sort(rep(temp,6)), 18)  #add temperature column 
  #by putting 6 temperatures for 16 time-points 
TPC$time <- sort(rep(time, 36))
TPC$Rep <- rep(1:6,(18*6))


pdf("/Users/baiprongfah/FYP/plot/r-set2-no-ctr-2.pdf")
#The code below is a courtesy of Danica Duan
############### Plotting ###################
for(i in temp){
  for(rep in 1:6){
    subset = subset(TPC, temp == i & Rep == rep)
    subset[,1:3] = log(subset[,1:3])
    subset[subset == -Inf| subset == Inf] = NaN
    for(s in 1:length(a)){
      plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(a[s],"_",i,"_",rep,sep=""), pch = 1, ylim = c(-10, 5))
    }
  }
}
graphics.off()


################ Fitting model ##################
gompertz_model = function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
  return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}  

t = seq(time[1],time[length(time)] , 0.1)

all_r = data.frame()
all_K = data.frame()
all_AIC = data.frame()
for(i in temp){
  for(rep in 1:6){
    subset = subset(TPC, temp == i & Rep == rep)
    subset[,1:3] = log(subset[,1:3])
    subset[subset == -Inf| subset == Inf] = NaN
    N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
    K_get = apply(subset[1:3], 2, max, na.rm =T)
    slopes = apply(subset[1:3], 2, diff)
    slope_max = apply(slopes[-1,], 2, max, na.rm =T)
    r = c() ; K = c(); aic = c()
    for(s in 1:length(a)){
      if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
      plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
           main = paste(a[s],"_",i,"_",rep,sep="") , pch = 1)
      while(any(is.na(subset[,s]))){
        subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
      }
      N_0_start = N_0_get[s]
      K_start = K_get[s]
      r_max_start = slope_max[s]
      t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
      if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
      sub = data.frame(subset[,s], subset$time)
      names(sub) = c("N", "time")
      # fitting gompertz
      model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
                                     start = list(r_max = r_max_start, K =K_start,
                                                  N_0 = N_0_start, t_lag = t_lag_start),
                                     control = list(maxiter = 500)),silent = TRUE)
      if(class(model_fit_gompertz) != "try-error"){
        r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
        K_value_gompertz = round(summary(model_fit_gompertz)$coefficients[2], 4)
        AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
        gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
                                     summary(model_fit_gompertz)$coefficients[2],
                                     summary(model_fit_gompertz)$coefficients[3],
                                     summary(model_fit_gompertz)$coefficients[4])
        lines(t, gr_gompertz, col = "blue")
      }else{r_value_gompertz = NaN; K_value_gompertz = NaN; AIC_value_gompertz = NaN}
      r_value = r_value_gompertz; K_value = K_value_gompertz; AIC_value = AIC_value_gompertz
      text(60, ((max(subset[,s], na.rm = TRUE)+min(subset[,s], na.rm = TRUE))/2),
           paste("r=",r_value, sep=""))
      r = c(r, r_value)
      K = c(K, exp(K_value))
      aic = c(aic, AIC_value)
    }
    all_r = rbind(all_r, r)
    all_K = rbind(all_K, K)
    all_AIC = rbind(all_AIC, aic)
  }
}
dev.off()
graphics.off()

#########fit Baranyi, Buchanan, Gompertz model############
#This is done for the growth curve of bacteria in spent-media.
#After fitting the above Gompertz, returned growth rates were manually check by eyes if they were appropriately fit the data.

#subset filtered medium
tf <- subset(s18, temp =='21')
tf <- tf[-c(2,3,4)] #only select s18-s18 column
tf <- tf[-c(1,3,4)] #only select s18-w02 column
tf <- tf[-c(1,2,4)] #only select s18-w03 column
tf <- tf[4:7] #only select control to the last column
tf <- subset(tf, Rep =='1')
colnames(tf) <- c('N','Temp','t','Rep')


#create function#
baranyi_model <- function(t, r_max, N_max, N_0, t_lag){  # Baranyi model (Baranyi 1993)
  return(N_max + log10((-1+exp(r_max*t_lag) + exp(r_max*t))/(exp(r_max*t) - 1 + exp(r_max*t_lag) * 10^(N_max-N_0))))
}
gompertz_model <- function(t, r_max, N_max, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
  return(N_0 + (N_max - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((N_max - N_0) * log(10)) + 1)))
}
buchanan_model <- function(t, r_max, N_max, N_0, t_lag){ # Buchanan model - three phase logistic (Buchanan 1997)
  return(N_0 + (t >= t_lag) * (t <= (t_lag + (N_max - N_0) * log(10)/r_max)) * r_max * (t - t_lag)/log(10) + (t >= t_lag) * (t > (t_lag + (N_max - N_0) * log(10)/r_max)) * (N_max - N_0))
}

#add Log N(here is OD) columns
tf$LogN <- log(tf$N)
tf$Log10N <- log10(tf$N) # for later

# visualise
plot(tf$t, tf$Log10N)

#indicate parameters 
N_0_start <- min(tf$Log10N)
N_max_start <- max(tf$Log10N)
t_lag_start <- tf$t[which.max(diff(diff(tf$Log10N)))]
r_max_start <- max(diff(tf$Log10N))/mean(diff(tf$t))

fit_baranyi <- nlsLM(Log10N ~ baranyi_model(t = t, r_max, N_max, N_0, t_lag), tf,
                     list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, N_max = N_max_start))
fit_buchanan <- nlsLM(Log10N ~ buchanan_model(t = t, r_max, N_max, N_0, t_lag), tf,
                      list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, N_max = N_max_start))
fit_gompertz <- nlsLM(Log10N ~ gompertz_model(t = t, r_max, N_max, N_0, t_lag), tf,
                      list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, N_max = N_max_start))

summary(fit_baranyi)
summary(fit_buchanan)
summary(fit_gompertz)

timepoints <- tf$t
baranyi_points <- baranyi_model(t = timepoints, r_max = coef(fit_baranyi)["r_max"], N_max = coef(fit_baranyi)["N_max"], N_0 = coef(fit_baranyi)["N_0"], t_lag = coef(fit_baranyi)["t_lag"])
buchanan_points <- buchanan_model(t = timepoints, r_max = coef(fit_buchanan)["r_max"], N_max = coef(fit_buchanan)["N_max"], N_0 = coef(fit_buchanan)["N_0"], t_lag = coef(fit_buchanan)["t_lag"])
gompertz_points <- gompertz_model(t = timepoints, r_max = coef(fit_gompertz)["r_max"], N_max = coef(fit_gompertz)["N_max"], N_0 = coef(fit_gompertz)["N_0"], t_lag = coef(fit_gompertz)["t_lag"])
df2 <- data.frame(timepoints, baranyi_points)
df2$model <- "Baranyi"
names(df2) <- c("t", "Log10N", "model")
df3 <- data.frame(timepoints, buchanan_points)
df3$model <- "Buchanan"
names(df3) <- c("t", "Log10N", "model")
df4 <- data.frame(timepoints, gompertz_points)
df4$model <- "Gompertz"
names(df4) <- c("t", "Log10N", "model")
model_frame <- rbind(df2,df4)

ggplot(tf, aes(x = t, y = Log10N)) +
  geom_point(size = 1) +
  geom_line(data = df4, aes(x = t, y = Log10N, col = model), linewidth = 1) +
  theme_bw(base_size  = 16) + 
  theme(aspect.ratio=1) + 
  labs(x = "Time", y = "log(OD)", title = 'w02-ctr, 18_3')
